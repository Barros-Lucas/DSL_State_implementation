package org.xtext.example.mydsl.generator
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fsm.FSM
import org.eclipse.emf.common.util.EList
import fsm.Transition
import fsm.Final
import fsm.Initial
import fsm.State

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val myfsm = resource.contents.get(0) as FSM
		
		fsa.generateFile("State.java", generateState())
		fsa.generateFile("Initial.java", generateInitial())
		fsa.generateFile("Final.java", generateFinal())
		fsa.generateFile("FSM.java", generateFSM())
		
		myfsm.state.forEach[s | if(!(s instanceof Final) && !(s instanceof Initial)){
			generateStateInstance(s.name)}]
		
		fsa.generateFile("Main.java", createMain(myfsm))
		
	}
	
	def generateState() '''public abstract class State {
	
		
		private String name;
		public State(String name) {
			this.name = name;
		}
		public String getName() {
			return name;
		}
		
		
	
	}
	'''
	
	def generateInitial() '''public class Initial extends State{
	
		
		public Initial(String name) {
			super(name);
			
		}
	
		
		
	}
	'''

	def generateFinal() '''public class Final extends State{
	
		
		public Final(String name) {
			super(name);
			
		}
	
		
		
	}
	'''

	def generateFSM() '''public class FSM {
		
		private String name;
		private State initial;
		private State finale;
		
		
		private State current;
		
		public FSM (String name, String initialName, String finalName) {
			this.name = name;
			this.initial = new Initial(initialName);
			this.finale = new Final(finalName);
			this.current = this.initial;
		}
		
		public void setState(State state) {
			if(this.current.getName() == state.getName()) {
				this.current = state;
			}else {
				//nothing because can't change state
			}
	
		}
	
		public String getName() {
			return name;
		}
	
		public State getInitial() {
			return initial;
		}
	
		public State getFinale() {
			return finale;
		}
	
		public State getCurrent() {
			return current;
		}
		
		 
		
	}
	'''

	def generateStateInstance(String name) '''public class «name» extends State{
		private String name;
		public «name» (String name){
			this.name = name;
		}
		public String getName (){
			return this.name;
		}
	}'''

	def createMain(FSM myfsm) '''public class Main {
	
		public static void main(String[] args) {
			
			State init = new Initial(«FOR s:myfsm.state»
										«IF s instanceof Initial»
										«s.name»
										«ENDIF»
										«ENDFOR»);
			State finale = new Final(«FOR s:myfsm.state»
													«IF s instanceof Final»
													«s.name»
													«ENDIF»
													«ENDFOR»);
			
			//creation array des state pour facilité le parcour et la vérification qu'un nom n'est deja pas pris pour pas creer 2 fois le meme state ( à changer par singleton)
			
			FSM fsm = new FSM(«myfsm.name», init, finale);
			
			System.out.println("Début d'éxécution");
			while(!(fsm.getCurrent() instanceof Final)) {
				//Ajout à chaque Transition fabriquée
				«FOR t:myfsm.transition»
					«generateTransition(t.state.get(1))»
				«ENDFOR»
			}
			System.out.println("Fin d'éxécution");
			
		}
	
	}'''

	def generateTransition(State state) '''fsm.setState(«state»);'''

}